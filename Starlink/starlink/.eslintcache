[{"D:\\JavaProject\\Starlink\\Starlink\\starlink\\src\\index.js":"1","D:\\JavaProject\\Starlink\\Starlink\\starlink\\src\\reportWebVitals.js":"2","D:\\JavaProject\\Starlink\\Starlink\\starlink\\src\\components\\App.js":"3","D:\\JavaProject\\Starlink\\Starlink\\starlink\\src\\components\\Header.js":"4","D:\\JavaProject\\Starlink\\Starlink\\starlink\\src\\components\\Footer.js":"5","D:\\JavaProject\\Starlink\\Starlink\\starlink\\src\\components\\Main.js":"6","D:\\JavaProject\\Starlink\\Starlink\\starlink\\src\\components\\SatSetting.js":"7","D:\\JavaProject\\Starlink\\Starlink\\starlink\\src\\components\\SatelliteList.js":"8","D:\\JavaProject\\Starlink\\Starlink\\starlink\\src\\constants.js":"9","D:\\JavaProject\\Starlink\\Starlink\\starlink\\src\\components\\WorldMap.js":"10"},{"size":468,"mtime":1607592079333,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":259,"mtime":1607594828448,"results":"14","hashOfConfig":"12"},{"size":460,"mtime":1607593079910,"results":"15","hashOfConfig":"12"},{"size":310,"mtime":1607593978194,"results":"16","hashOfConfig":"12"},{"size":2652,"mtime":1608962117437,"results":"17","hashOfConfig":"12"},{"size":4705,"mtime":1608216847267,"results":"18","hashOfConfig":"12"},{"size":3710,"mtime":1608371115012,"results":"19","hashOfConfig":"12"},{"size":314,"mtime":1608366944083,"results":"20","hashOfConfig":"12"},{"size":8079,"mtime":1608479876802,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"13cnn5m",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},"D:\\JavaProject\\Starlink\\Starlink\\starlink\\src\\index.js",[],["44","45"],"D:\\JavaProject\\Starlink\\Starlink\\starlink\\src\\reportWebVitals.js",[],"D:\\JavaProject\\Starlink\\Starlink\\starlink\\src\\components\\App.js",[],"D:\\JavaProject\\Starlink\\Starlink\\starlink\\src\\components\\Header.js",[],"D:\\JavaProject\\Starlink\\Starlink\\starlink\\src\\components\\Footer.js",[],"D:\\JavaProject\\Starlink\\Starlink\\starlink\\src\\components\\Main.js",[],"D:\\JavaProject\\Starlink\\Starlink\\starlink\\src\\components\\SatSetting.js",[],"D:\\JavaProject\\Starlink\\Starlink\\starlink\\src\\components\\SatelliteList.js",[],"D:\\JavaProject\\Starlink\\Starlink\\starlink\\src\\constants.js",[],"D:\\JavaProject\\Starlink\\Starlink\\starlink\\src\\components\\WorldMap.js",["46","47","48","49"],"import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport { Spin } from \"antd\";\r\nimport { feature } from \"topojson-client\";\r\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\r\nimport { geoGraticule, geoPath } from 'd3-geo';\r\nimport { select as d3Select } from 'd3-selection';\r\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\r\nimport * as d3Scale from \"d3-scale\";\r\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\r\n\r\nimport { WORLD_MAP_URL, SATELLITE_POSITION_URL, SAT_API_KEY } from '../constants';\r\n\r\nconst width = 960;\r\nconst height = 600;\r\n\r\nclass WorldMap extends Component {\r\n    constructor() {\r\n        super();\r\n        this.refMap = React.createRef();\r\n        this.refTrack = React.createRef();\r\n        this.map = null;\r\n        this.color = d3Scale.scaleOrdinal(schemeCategory10);\r\n        this.state = {\r\n            // to ensure user cannot choose satellite while drawing picture and loading data\r\n            isLoading: false,\r\n            isDrawing: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios\r\n            .get(WORLD_MAP_URL)\r\n            .then( res => {\r\n                console.log(res);\r\n                const { data } =res;\r\n                const land = feature(data, data.objects.countries).features;\r\n                //console.log(land);\r\n                this.generateMap(land);\r\n            })\r\n            .catch( err => {\r\n                console.log(`err in fetching map data ${err}`)\r\n            })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.satData !== this.props.satData) {\r\n            const {\r\n                latitude,\r\n                longitude,\r\n                elevation,\r\n                altitude,\r\n                duration\r\n            } = this.props.observerData;\r\n            const endTime = duration * 60;\r\n\r\n            this.setState({\r\n                isLoading: true\r\n            });\r\n\r\n            // step1: prepare for urls\r\n            const urls = this.props.satData.map(sat => {\r\n                const { satid } = sat;\r\n                const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\r\n\r\n                return axios.get(url);\r\n            });\r\n            //console.log(\"urls in map -> \",urls)\r\n\r\n            // step2: parse sats positions\r\n            // axios.all(urls)\r\n            //     .then(\r\n            //         axios.spread((...args) => {\r\n            //             return args.map(item => item.data);\r\n            //         })\r\n            //     )\r\n            //     .then(response => {\r\n            //         console.log('response ->', response);\r\n            //     })\r\n            //     .catch( err => {\r\n            //         console.log(\"err in fetch satellite position\", err);\r\n            //     })\r\n            Promise.all(urls)\r\n                .then( results => {\r\n                    //console.log('->', results);\r\n                    const arr = results.map(sat => sat.data);\r\n                    //console.log('arr -> ', arr);\r\n\r\n                    this.setState({\r\n                        isLoading: false,\r\n                        isDrawing: true\r\n                    })\r\n\r\n                    // case1: isdrawing true -> cannot track\r\n                    // case2: isdrawing false -> track\r\n                    // drawing position\r\n                    if (!prevState.isDrawing) {\r\n                        this.track(arr);\r\n                    } else {\r\n                        const oHint = document.getElementsByClassName(\"hint\")[0];\r\n                        oHint.innerHTML =\r\n                            \"Please wait for these satellite animation to finish before selection new ones!\";\r\n                    }\r\n                })\r\n                .catch( e => {\r\n                    console.log('failed ->', e);\r\n                })\r\n        }\r\n    }\r\n\r\n    track = data => {\r\n        // canvas2\r\n        if (!data || !data[0].hasOwnProperty('positions')) {\r\n            throw new Error(\"no position data\");\r\n            return;\r\n        }\r\n\r\n        const len = data[0].positions.length;\r\n        const { duration } = this.props.observerData;\r\n        const { context2 } = this.map;\r\n\r\n        let now = new Date();\r\n        let i = 0;\r\n\r\n        let timer = setInterval( () => {\r\n            let ct = new Date();\r\n\r\n            let timePassed = i === 0 ? 0 : ct - now;\r\n            let time = new Date(now.getTime() + 60 * timePassed);\r\n\r\n            context2.clearRect(0, 0, width, height);\r\n\r\n            context2.font = \"bold 14px sans-serif\";\r\n            context2.fillStyle = \"#333333\";\r\n            context2.textAlign = \"center\";\r\n            context2.fillText(d3TimeFormat(time), width / 2, 13);\r\n\r\n            // clear satimage while time is longer than duration\r\n            if (i >= len ) {\r\n                clearInterval();\r\n                this.setState({ isDrawing: false });\r\n                const oHint = document.getElementsByClassName(\"hint\")[0];\r\n                oHint.innerHTML = \"\";\r\n                return;\r\n            }\r\n\r\n            data.forEach( sat => {\r\n                const { positions, info } = sat;\r\n                this.drawSat(info, positions[i]);\r\n            })\r\n\r\n            i += 60;\r\n        }, 1000)\r\n\r\n\r\n    }\r\n\r\n    drawSat = (sat, pos) => {\r\n        const { satlongitude, satlatitude } = pos;\r\n        if (!satlongitude || !satlatitude) return;\r\n\r\n        const { satname } = sat;\r\n        const name = satname.match(/\\d+/g).join(\"\");\r\n\r\n        const { projection, context2 } = this.map;\r\n\r\n        const xy = projection([satlongitude, satlatitude]);\r\n        context2.fillStyle = this.color(name);\r\n        context2.beginPath();\r\n        context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\r\n        context2.fill();\r\n        context2.font = \"bold 11px sans-serif\";\r\n        context2.textAlign = \"center\";\r\n        context2.fillText(name, xy[0], xy[1] + 14);\r\n\r\n    }\r\n\r\n    generateMap = land => {\r\n        const projection = geoKavrayskiy7()\r\n            .scale(170)\r\n            .translate([width / 2, height / 2])\r\n            .precision(.1);\r\n\r\n        //console.log(projection)\r\n        const graticule = geoGraticule();\r\n\r\n        const canvas = d3Select(this.refMap.current)\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height);\r\n\r\n        const canvas2 = d3Select(this.refTrack.current)\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height);\r\n\r\n        const context = canvas.node().getContext(\"2d\");\r\n        const context2 = canvas2.node().getContext(\"2d\");\r\n\r\n        let path = geoPath().projection(projection).context(context);\r\n\r\n        land.forEach( ele => {\r\n            context.fillStyle = '#B3DDEF';\r\n            context.strokeStyle = '#000';\r\n            context.globalAlpha = 0.7;\r\n            context.beginPath();\r\n            path(ele);\r\n            context.fill();\r\n            context.stroke();\r\n\r\n            context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\r\n            context.beginPath();\r\n            path(graticule());\r\n            context.lineWidth = 0.1;\r\n            context.stroke();\r\n\r\n            context.beginPath();\r\n            context.lineWidth = 0.5;\r\n            path(graticule.outline());\r\n            context.stroke();\r\n        })\r\n\r\n        this.map = {\r\n            graticule: graticule,\r\n            context: context,\r\n            context2: context2,\r\n            projection: projection\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { isLoading } = this.state;\r\n        return (\r\n            <div className=\"map-box\">\r\n                {isLoading ? (\r\n                    <div className=\"spinner\">\r\n                        <Spin tip=\"Loading...\" size=\"large\" />\r\n                    </div>\r\n                ) : null}\r\n                <canvas className=\"map\" ref={this.refMap}></canvas>\r\n                <canvas className=\"track\" ref={this.refTrack}></canvas>\r\n                <div className=\"hint\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WorldMap;",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":52,"column":17,"nodeType":"56","messageId":"57","endLine":52,"endColumn":25},{"ruleId":"58","severity":1,"message":"59","line":115,"column":13,"nodeType":"60","messageId":"61","endLine":115,"endColumn":20},{"ruleId":"54","severity":1,"message":"62","line":119,"column":17,"nodeType":"56","messageId":"57","endLine":119,"endColumn":25},{"ruleId":"54","severity":1,"message":"63","line":125,"column":13,"nodeType":"56","messageId":"57","endLine":125,"endColumn":18},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'altitude' is assigned a value but never used.","Identifier","unusedVar","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'duration' is assigned a value but never used.","'timer' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]